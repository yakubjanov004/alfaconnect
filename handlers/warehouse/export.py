from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, BufferedInputFile
from aiogram.fsm.context import FSMContext
from keyboards.warehouse_buttons import get_warehouse_export_types_keyboard, get_warehouse_export_formats_keyboard
from database.warehouse.materials import (
    get_warehouse_inventory_for_export,
)
from database.warehouse.statistics import (
    get_warehouse_statistics_for_export,
)
from utils.export_utils import ExportUtils
from database.basic.language import get_user_language
from states.warehouse_states import WarehouseStates
import logging
from filters.role_filter import RoleFilter

router = Router()
router.message.filter(RoleFilter(role="warehouse"))
logger = logging.getLogger(__name__)

@router.message(F.text.in_(["üì§ Export", "üì§ –≠–∫—Å–ø–æ—Ä—Ç"]))
async def export_handler(message: Message, state: FSMContext):
    """Main export handler - shows export types"""
    lang = await get_user_language(message.from_user.id) or "uz"
    
    try:
        await state.clear()
        keyboard = get_warehouse_export_types_keyboard(lang)
        
        if lang == "ru":
            text = (
                "üì§ <b>–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Ç–∏–ø–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∞:\n\n"
                "üì¶ <b>–ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è</b> - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤\n"
                "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–ª–∞–¥–∞\n\n"
                "üë§ <b>–†–æ–ª—å:</b> –°–∫–ª–∞–¥"
            )
        else:
            text = (
                "üì§ <b>Ma'lumotlarni Export qilish</b>\n\n"
                "Quyidagi export turlaridan birini tanlang:\n\n"
                "üì¶ <b>Inventarizatsiya</b> - Barcha materiallar ro'yxati\n"
                "üìä <b>Statistika</b> - Ombor statistikasi\n\n"
                "üë§ <b>Rol:</b> Ombor"
            )
        
        await message.answer(
            text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Export handler error: {e}")
        if lang == "ru":
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        else:
            await message.answer("‚ùå Xatolik yuz berdi. Iltimos, qaytadan urinib ko'ring.")

@router.callback_query(F.data == "warehouse_export_inventory")
async def export_inventory_handler(callback: CallbackQuery, state: FSMContext):
    """Handle inventory export selection"""
    lang = await get_user_language(callback.from_user.id) or "uz"
    
    try:
        await state.update_data(export_type="inventory")
        keyboard = get_warehouse_export_formats_keyboard(lang)
        
        if lang == "ru":
            text = (
                "üì¶ <b>–≠–∫—Å–ø–æ—Ä—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞:\n\n"
                "‚Ä¢ <b>CSV</b> - –¢–∞–±–ª–∏—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç\n"
                "‚Ä¢ <b>Excel</b> - Microsoft Excel\n"
                "‚Ä¢ <b>Word</b> - Microsoft Word\n"
                "‚Ä¢ <b>PDF</b> - Portable Document Format"
            )
        else:
            text = (
                "üì¶ <b>Inventarizatsiya Export</b>\n\n"
                "Export formatini tanlang:\n\n"
                "‚Ä¢ <b>CSV</b> - Jadval formati\n"
                "‚Ä¢ <b>Excel</b> - Microsoft Excel\n"
                "‚Ä¢ <b>Word</b> - Microsoft Word\n"
                "‚Ä¢ <b>PDF</b> - Portable Document Format"
            )
        
        await callback.message.edit_text(
            text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"Export inventory handler error: {e}")
        if lang == "ru":
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        else:
            await callback.answer("‚ùå Xatolik yuz berdi", show_alert=True)

@router.callback_query(F.data == "warehouse_export_statistics")
async def export_statistics_handler(callback: CallbackQuery, state: FSMContext):
    """Handle statistics export selection"""
    lang = await get_user_language(callback.from_user.id) or "uz"
    
    try:
        await state.update_data(export_type="statistics")
        keyboard = get_warehouse_export_formats_keyboard(lang)
        
        if lang == "ru":
            text = (
                "üìä <b>–≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞:\n\n"
                "‚Ä¢ <b>CSV</b> - –¢–∞–±–ª–∏—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç\n"
                "‚Ä¢ <b>Excel</b> - Microsoft Excel\n"
                "‚Ä¢ <b>Word</b> - Microsoft Word\n"
                "‚Ä¢ <b>PDF</b> - Portable Document Format"
            )
        else:
            text = (
                "üìä <b>Statistika Export</b>\n\n"
                "Export formatini tanlang:\n\n"
                "‚Ä¢ <b>CSV</b> - Jadval formati\n"
                "‚Ä¢ <b>Excel</b> - Microsoft Excel\n"
                "‚Ä¢ <b>Word</b> - Microsoft Word\n"
                "‚Ä¢ <b>PDF</b> - Portable Document Format"
            )
        
        await callback.message.edit_text(
            text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"Export statistics handler error: {e}")
        if lang == "ru":
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        else:
            await callback.answer("‚ùå Xatolik yuz berdi", show_alert=True)

@router.callback_query(F.data.startswith("warehouse_format_"))
async def export_format_handler(callback: CallbackQuery, state: FSMContext):
    """Handle export format selection and generate file"""
    lang = await get_user_language(callback.from_user.id) or "uz"
    
    try:
        format_type = callback.data.split("_")[-1]  # csv, xlsx, docx, pdf
        data = await state.get_data()
        export_type = data.get("export_type", "inventory")
        
        # Show processing message
        if lang == "ru":
            await callback.message.edit_text(
                "‚è≥ <b>–ü—Ä–æ—Ü–µ—Å—Å —ç–∫—Å–ø–æ—Ä—Ç–∞...</b>\n\n"
                "–î–∞–Ω–Ω—ã–µ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é—Ç—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
                parse_mode="HTML"
            )
        else:
            await callback.message.edit_text(
                "‚è≥ <b>Export jarayoni...</b>\n\n"
                "Ma'lumotlar tayyorlanmoqda, iltimos kuting...",
                parse_mode="HTML"
            )
        
        # Get data based on export type
        if export_type == "inventory":
            raw_data = await get_warehouse_inventory_for_export()
            if lang == "ru":
                title = "–û—Ç—á–µ—Ç –ø–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏ —Å–∫–ª–∞–¥–∞"
                filename_base = "sklad_inventarizatsiya"
            else:
                title = "Ombor Inventarizatsiya Hisoboti"
                filename_base = "ombor_inventarizatsiya"
        elif export_type == "statistics":
            raw_data = await get_warehouse_statistics_for_export()
            if lang == "ru":
                title = "–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç —Å–∫–ª–∞–¥–∞"
                filename_base = "sklad_statistika"
            else:
                title = "Ombor Statistika Hisoboti"
                filename_base = "ombor_statistika"
        else:
            raw_data = []
            if lang == "ru":
                title = "–û—Ç—á–µ—Ç —Å–∫–ª–∞–¥–∞"
                filename_base = "sklad_hisoboti"
            else:
                title = "Ombor Hisoboti"
                filename_base = "ombor_hisoboti"
        
        if not raw_data:
            if lang == "ru":
                await callback.message.edit_text(
                    "‚ùå <b>–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>\n\n"
                    "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.",
                    parse_mode="HTML"
                )
            else:
                await callback.message.edit_text(
                    "‚ùå <b>Ma'lumot topilmadi</b>\n\n"
                    "Export qilish uchun ma'lumotlar mavjud emas.",
                    parse_mode="HTML"
                )
            await callback.answer()
            return
        
        # Format data for export
        formatted_data = ExportUtils.format_data_for_export(raw_data, export_type)
        
        # Generate file based on format
        if format_type == "csv":
            file_content = ExportUtils.generate_csv(formatted_data)
            filename = ExportUtils.get_filename_with_timestamp(filename_base, "csv")
            document = BufferedInputFile(
                file_content.getvalue(),
                filename=filename
            )
        elif format_type == "xlsx":
            if lang == "ru":
                file_content = ExportUtils.generate_excel(formatted_data, "–î–∞–Ω–Ω—ã–µ —Å–∫–ª–∞–¥–∞", title)
            else:
                file_content = ExportUtils.generate_excel(formatted_data, "Ombor Ma'lumotlari", title)
            filename = ExportUtils.get_filename_with_timestamp(filename_base, "xlsx")
            document = BufferedInputFile(
                file_content.getvalue(),
                filename=filename
            )
        elif format_type == "docx":
            file_content = ExportUtils.generate_word(formatted_data, title)
            filename = ExportUtils.get_filename_with_timestamp(filename_base, "docx")
            document = BufferedInputFile(
                file_content.getvalue(),
                filename=filename
            )
        elif format_type == "pdf":
            file_content = ExportUtils.generate_pdf(formatted_data, title)
            filename = ExportUtils.get_filename_with_timestamp(filename_base, "pdf")
            document = BufferedInputFile(
                file_content.getvalue(),
                filename=filename
            )
        else:
            if lang == "ru":
                await callback.message.edit_text(
                    "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>\n\n"
                    "–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.",
                    parse_mode="HTML"
                )
            else:
                await callback.message.edit_text(
                    "‚ùå <b>Noto'g'ri format</b>\n\n"
                    "Tanlangan format qo'llab-quvvatlanmaydi.",
                    parse_mode="HTML"
                )
            await callback.answer()
            return
        
        # Send the file
        if lang == "ru":
            caption = (
                f"üìÑ <b>{title}</b>\n\n"
                f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö: {len(formatted_data)}\n"
                f"üìÖ –°–æ–∑–¥–∞–Ω: {ExportUtils.get_filename_with_timestamp('', '').split('_')[1][:8]}\n"
                f"üìÅ –§–æ—Ä–º–∞—Ç: {format_type.upper()}\n\n"
                f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!"
            )
        else:
            caption = (
                f"üìÑ <b>{title}</b>\n\n"
                f"üìä Ma'lumotlar soni: {len(formatted_data)}\n"
                f"üìÖ Yaratilgan: {ExportUtils.get_filename_with_timestamp('', '').split('_')[1][:8]}\n"
                f"üìÅ Format: {format_type.upper()}\n\n"
                f"‚úÖ Export muvaffaqiyatli yakunlandi!"
            )
        
        await callback.message.answer_document(
            document=document,
            caption=caption,
            parse_mode="HTML"
        )
        
        # Clear the processing message
        await callback.message.delete()
        
        if lang == "ru":
            await callback.answer("‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –≥–æ—Ç–æ–≤!")
        else:
            await callback.answer("‚úÖ Export tayyor!")
        await state.clear()
        
    except Exception as e:
        logger.error(f"Export format handler error: {e}")
        if lang == "ru":
            await callback.message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞</b>\n\n"
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                parse_mode="HTML"
            )
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        else:
            await callback.message.edit_text(
                "‚ùå <b>Export xatoligi</b>\n\n"
                "Fayl yaratishda xatolik yuz berdi. Iltimos, qaytadan urinib ko'ring.",
                parse_mode="HTML"
            )
            await callback.answer("‚ùå Xatolik yuz berdi", show_alert=True)

@router.callback_query(F.data == "warehouse_export_back_types")
async def export_back_to_types_handler(callback: CallbackQuery, state: FSMContext):
    """Go back to export types selection"""
    lang = await get_user_language(callback.from_user.id) or "uz"
    
    try:
        keyboard = get_warehouse_export_types_keyboard(lang)
        
        if lang == "ru":
            text = (
                "üì§ <b>–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Ç–∏–ø–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∞:\n\n"
                "üì¶ <b>–ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è</b> - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤\n"
                "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–ª–∞–¥–∞\n\n"
                "üë§ <b>–†–æ–ª—å:</b> –°–∫–ª–∞–¥"
            )
        else:
            text = (
                "üì§ <b>Ma'lumotlarni Export qilish</b>\n\n"
                "Quyidagi export turlaridan birini tanlang:\n\n"
                "üì¶ <b>Inventarizatsiya</b> - Barcha materiallar ro'yxati\n"
                "üìä <b>Statistika</b> - Ombor statistikasi\n\n"
                "üë§ <b>Rol:</b> Ombor"
            )
        
        await callback.message.edit_text(
            text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"Export back handler error: {e}")
        if lang == "ru":
            await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
        else:
            await callback.answer("‚ùå Xatolik yuz berdi", show_alert=True)
