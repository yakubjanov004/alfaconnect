from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from database.warehouse_queries import get_all_materials, search_materials, get_material_by_id
from database.technician_queries import fetch_technician_materials, fetch_assigned_qty
from database.jm_inbox_queries import db_get_user_by_id
from database.warehouse_queries import get_users_by_role
from keyboards.warehouse_buttons import get_warehouse_main_menu
from filters.role_filter import RoleFilter
from states.warehouse_states import TechnicianMaterialStates
from database.language_queries import get_user_language  # ‚Üê tilni admin-uslubda olamiz

router = Router()

@router.message(RoleFilter("warehouse"), F.text.in_(["üì¶ Teknik xodimga mahsulot berish", "üì¶ –û—Ç–¥–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª —Ç–µ—Ö–Ω–∏–∫—É"]))
async def technician_material_menu(message: Message, state: FSMContext):
    """Texnikka material berish menyusi / –ú–µ–Ω—é –≤—ã–¥–∞—á–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —Ç–µ—Ö–Ω–∏–∫—É"""
    lang = await get_user_language(message.from_user.id) or "uz"
    await state.set_state(TechnicianMaterialStates.select_technician)
    
    # Barcha texniklarni olish
    technicians = await get_users_by_role("technician")
    
    if not technicians:
        await message.answer(
            ("‚ùå Hozirda tizimda texnik xodimlar mavjud emas." if lang == "uz" else "‚ùå –í —Å–∏—Å—Ç–µ–º–µ —Å–µ–π—á–∞—Å –Ω–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤."),
            reply_markup=get_warehouse_main_menu(lang)
        )
        await state.clear()
        return
    
    # Texniklarni inline keyboard qilish
    keyboard = []
    for tech in technicians:
        full_name = (tech.get('full_name') or '').strip()
        keyboard.append([
            InlineKeyboardButton(
                text=f"üë®‚Äçüîß {full_name}",
                callback_data=f"select_tech_{tech['id']}"
            )
        ])
    
    keyboard.append([
        InlineKeyboardButton(
            text=("‚óÄÔ∏è Orqaga" if lang == "uz" else "‚óÄÔ∏è –ù–∞–∑–∞–¥"),
            callback_data="back_to_warehouse_menu"
        )
    ])
    
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await message.answer(
        ("üë®‚Äçüîß Qaysi texnik xodimga material berishni xohlaysiz?\n\nTexnik xodimni tanlang:"
         if lang == "uz" else
         "üë®‚Äçüîß –ö–æ–º—É –∏–∑ —Ç–µ—Ö–Ω–∏–∫–æ–≤ –≤—ã–¥–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª?\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:"),
        reply_markup=reply_markup
    )

@router.callback_query(F.data.startswith("select_tech_"))
async def select_technician(callback: CallbackQuery, state: FSMContext):
    """Texnikni tanlash / –í—ã–±–æ—Ä —Ç–µ—Ö–Ω–∏–∫–∞"""
    lang = await get_user_language(callback.from_user.id) or "uz"
    tech_id = int(callback.data.split("_")[-1])
    
    # Texnik ma'lumotlarini olish
    technician = await db_get_user_by_id(tech_id)
    if not technician:
        await callback.answer(("‚ùå Texnik topilmadi!" if lang == "uz" else "‚ùå –¢–µ—Ö–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!"), show_alert=True)
        return
    
    # State ga texnik ID sini saqlash
    await state.update_data(technician_id=tech_id)
    await state.set_state(TechnicianMaterialStates.select_material)
    
    # Texnikning mavjud materiallarini ko'rsatish
    tech_materials = await fetch_technician_materials(tech_id)
    
    full_name = (technician.get('full_name') or '').strip() or f"ID: {tech_id}"
    
    message_text = (
        f"üë®‚Äçüîß **{full_name}** texnikining mavjud materiallari:\n\n"
        if lang == "uz" else
        f"üë®‚Äçüîß **{full_name}** ‚Äî –º–∞—Ç–µ—Ä–∏–∞–ª—ã —É —Ç–µ—Ö–Ω–∏–∫–∞:\n\n"
    )
    
    if tech_materials:
        message_text += ("üì¶ **Mavjud materiallar:**\n" if lang == "uz" else "üì¶ **–ò–º–µ—é—â–∏–µ—Å—è –º–∞—Ç–µ—Ä–∏–∞–ª—ã:**\n")
        for material in tech_materials:
            message_text += (
                f"‚Ä¢ {material['name']} - {material['stock_quantity']} dona\n"
                if lang == "uz" else
                f"‚Ä¢ {material['name']} ‚Äî {material['stock_quantity']} —à—Ç.\n"
            )
    else:
        message_text += ("üì¶ Hozirda texnikda materiallar mavjud emas.\n"
                         if lang == "uz" else
                         "üì¶ –£ —Ç–µ—Ö–Ω–∏–∫–∞ —Å–µ–π—á–∞—Å –Ω–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.\n")
    
    message_text += ("\nüîç Qo'shish uchun material tanlang:" if lang == "uz" else "\nüîç –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –≤—ã–¥–∞—á–∏:")
    
    # Ombordagi barcha materiallarni ko'rsatish
    warehouse_materials = await get_all_materials()
    
    if not warehouse_materials:
        await callback.message.edit_text(
            message_text + ("\n\n‚ùå Omborda materiallar mavjud emas." if lang == "uz" else "\n\n‚ùå –ù–∞ —Å–∫–ª–∞–¥–µ –Ω–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤."),
            parse_mode="Markdown"
        )
        await state.clear()
        return
    
    # Materiallarni inline keyboard qilish
    keyboard = []
    for material in warehouse_materials:
        if material['quantity'] > 0:  # Faqat mavjud materiallar
            keyboard.append([
                InlineKeyboardButton(
                    text=(
                        f"üì¶ {material['name']} ({material['quantity']} dona)"
                        if lang == "uz" else
                        f"üì¶ {material['name']} ({material['quantity']} —à—Ç.)"
                    ),
                    callback_data=f"select_material_{material['id']}"
                )
            ])
    
    if not keyboard:
        await callback.message.edit_text(
            message_text + ("\n\n‚ùå Omborda mavjud materiallar yo'q." if lang == "uz" else "\n\n‚ùå –ù–∞ —Å–∫–ª–∞–¥–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤."),
            parse_mode="Markdown"
        )
        await state.clear()
        return
    
    keyboard.append([
        InlineKeyboardButton(
            text=("‚óÄÔ∏è Orqaga" if lang == "uz" else "‚óÄÔ∏è –ù–∞–∑–∞–¥"),
            callback_data="back_to_tech_selection"
        )
    ])
    
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await callback.message.edit_text(
        message_text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

@router.callback_query(F.data.startswith("select_material_"))
async def select_material(callback: CallbackQuery, state: FSMContext):
    """Materialni tanlash / –í—ã–±–æ—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–∞"""
    lang = await get_user_language(callback.from_user.id) or "uz"
    material_id = int(callback.data.split("_")[-1])
    
    # Material ma'lumotlarini olish
    material = await get_material_by_id(material_id)
    if not material:
        await callback.answer(("‚ùå Material topilmadi!" if lang == "uz" else "‚ùå –ú–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!"), show_alert=True)
        return
    
    if material['quantity'] <= 0:
        await callback.answer(("‚ùå Bu material omborda mavjud emas!" if lang == "uz" else "‚ùå –≠—Ç–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –Ω–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ!"), show_alert=True)
        return
    
    # State ga material ID sini saqlash
    await state.update_data(material_id=material_id)
    await state.set_state(TechnicianMaterialStates.enter_quantity)
    
    # State dan texnik ID sini olish
    data = await state.get_data()
    tech_id = data.get('technician_id')
    
    # Texnikning bu materialdagi mavjud miqdorini olish
    current_qty = await fetch_assigned_qty(tech_id, material_id)
    
    await callback.message.edit_text(
        (
            f"üì¶ **{material['name']}**\n\n"
            f"üí∞ Narxi: {material.get('price', 'Belgilanmagan')}\n"
            f"üìä Omborda mavjud: {material['quantity']} dona\n"
            f"üë®‚Äçüîß Texnikda mavjud: {current_qty} dona\n\n"
            f"‚ùì Texnikka necha dona bermoqchisiz?\n"
            f"(1 dan {material['quantity']} gacha raqam kiriting)"
        ) if lang == "uz" else
        (
            f"üì¶ **{material['name']}**\n\n"
            f"üí∞ –¶–µ–Ω–∞: {material.get('price', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
            f"üìä –ù–∞ —Å–∫–ª–∞–¥–µ: {material['quantity']} —à—Ç.\n"
            f"üë®‚Äçüîß –£ —Ç–µ—Ö–Ω–∏–∫–∞: {current_qty} —à—Ç.\n\n"
            f"‚ùì –°–∫–æ–ª—å–∫–æ —à—Ç—É–∫ –≤—ã–¥–∞—Ç—å —Ç–µ—Ö–Ω–∏–∫—É?\n"
            f"(–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {material['quantity']})"
        ),
        parse_mode="Markdown"
    )

@router.message(TechnicianMaterialStates.enter_quantity)
async def enter_quantity(message: Message, state: FSMContext):
    """Miqdorni kiritish / –í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
    lang = await get_user_language(message.from_user.id) or "uz"
    try:
        quantity = int((message.text or "").strip())
    except ValueError:
        await message.answer(("‚ùå Iltimos, faqat raqam kiriting!" if lang == "uz" else "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ!"))
        return
    
    if quantity <= 0:
        await message.answer(("‚ùå Miqdor 0 dan katta bo'lishi kerak!" if lang == "uz" else "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!"))
        return
    
    # State dan ma'lumotlarni olish
    data = await state.get_data()
    tech_id = data.get('technician_id')
    material_id = data.get('material_id')
    
    # Material ma'lumotlarini tekshirish
    material = await get_material_by_id(material_id)
    if not material or material['quantity'] < quantity:
        await message.answer(
            (
                f"‚ùå Omborda yetarli material yo'q!\nMavjud: {material['quantity'] if material else 0} dona"
            ) if lang == "uz" else
            (
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ!\n–î–æ—Å—Ç—É–ø–Ω–æ: {material['quantity'] if material else 0} —à—Ç."
            )
        )
        return
    
    # Texnik ma'lumotlarini olish
    technician = await db_get_user_by_id(tech_id)
    full_name = (technician.get('full_name') or '').strip() or f"ID: {tech_id}"
    
    # Tasdiqlash uchun keyboard
    keyboard = [
        [
            InlineKeyboardButton(
                text=("‚úÖ Tasdiqlash" if lang == "uz" else "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"),
                callback_data=f"confirm_assign_{tech_id}_{material_id}_{quantity}"
            ),
            InlineKeyboardButton(
                text=("‚ùå Bekor qilish" if lang == "uz" else "‚ùå –û—Ç–º–µ–Ω–∞"),
                callback_data="cancel_assign"
            )
        ]
    ]
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await message.answer(
        (
            f"üìã **Tasdiqlash**\n\n"
            f"üë®‚Äçüîß Texnik: {full_name}\n"
            f"üì¶ Material: {material['name']}\n"
            f"üìä Miqdor: {quantity} dona\n\n"
            f"‚ùì Materialni texnikka berishni tasdiqlaysizmi?"
        ) if lang == "uz" else
        (
            f"üìã **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ**\n\n"
            f"üë®‚Äçüîß –¢–µ—Ö–Ω–∏–∫: {full_name}\n"
            f"üì¶ –ú–∞—Ç–µ—Ä–∏–∞–ª: {material['name']}\n"
            f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity} —à—Ç.\n\n"
            f"‚ùì –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–¥–∞—á—É –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —Ç–µ—Ö–Ω–∏–∫—É?"
        ),
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

@router.callback_query(F.data.startswith("confirm_assign_"))
async def confirm_assignment(callback: CallbackQuery, state: FSMContext):
    """Material berishni tasdiqlash / –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–¥–∞—á–∏"""
    lang = await get_user_language(callback.from_user.id) or "uz"
    try:
        parts = callback.data.split("_")
        tech_id = int(parts[2])
        material_id = int(parts[3])
        quantity = int(parts[4])
        
        # Material va texnik ma'lumotlarini olish
        material = await get_material_by_id(material_id)
        technician = await db_get_user_by_id(tech_id)
        
        if not material or not technician:
            await callback.answer(("‚ùå Ma'lumotlar topilmadi!" if lang == "uz" else "‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!"), show_alert=True)
            return
        
        if material['quantity'] < quantity:
            await callback.answer(("‚ùå Omborda yetarli material yo'q!" if lang == "uz" else "‚ùå –ù–∞ —Å–∫–ª–∞–¥–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞!"), show_alert=True)
            return
        
        # Material berishni amalga oshirish
        import asyncpg
        from config import settings
        
        conn = await asyncpg.connect(settings.DB_URL)
        try:
            async with conn.transaction():
                # Ombordagi materialni kamaytirish
                await conn.execute(
                    "UPDATE materials SET quantity = quantity - $1 WHERE id = $2",
                    quantity, material_id
                )
                
                # Texnikka material berish (material_and_technician jadvaliga qo'shish)
                await conn.execute(
                    """
                    INSERT INTO material_and_technician (user_id, material_id, quantity)
                    VALUES ($1, $2, $3)
                    ON CONFLICT (user_id, material_id)
                    DO UPDATE SET quantity = material_and_technician.quantity + $3
                    """,
                    tech_id, material_id, quantity
                )
        finally:
            await conn.close()
        
        full_name = (technician.get('full_name') or '').strip() or f"ID: {tech_id}"
        
        await callback.message.edit_text(
            (
                f"‚úÖ **Muvaffaqiyatli bajarildi!**\n\n"
                f"üë®‚Äçüîß Texnik: {full_name}\n"
                f"üì¶ Material: {material['name']}\n"
                f"üìä Berilgan miqdor: {quantity} dona\n\n"
                f"Material texnikka muvaffaqiyatli berildi!"
            ) if lang == "uz" else
            (
                f"‚úÖ **–£—Å–ø–µ—à–Ω–æ!**\n\n"
                f"üë®‚Äçüîß –¢–µ—Ö–Ω–∏–∫: {full_name}\n"
                f"üì¶ –ú–∞—Ç–µ—Ä–∏–∞–ª: {material['name']}\n"
                f"üìä –í—ã–¥–∞–Ω–æ: {quantity} —à—Ç.\n\n"
                f"–ú–∞—Ç–µ—Ä–∏–∞–ª —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω —Ç–µ—Ö–Ω–∏–∫—É!"
            ),
            parse_mode="Markdown"
        )
        
        await state.clear()
        
        # Asosiy menyuga qaytish
        await callback.message.answer(
            ("üè† Asosiy menyu:" if lang == "uz" else "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:"),
            reply_markup=get_warehouse_main_menu(lang)
        )
        
    except Exception as e:
        await callback.answer(
            (f"‚ùå Xatolik yuz berdi: {str(e)}" if lang == "uz" else f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"),
            show_alert=True
        )
        await state.clear()

@router.callback_query(F.data == "cancel_assign")
async def cancel_assignment(callback: CallbackQuery, state: FSMContext):
    """Material berishni bekor qilish / –û—Ç–º–µ–Ω–∞ –≤—ã–¥–∞—á–∏"""
    lang = await get_user_language(callback.from_user.id) or "uz"
    await callback.message.edit_text(
        ("‚ùå Material berish bekor qilindi." if lang == "uz" else "‚ùå –í—ã–¥–∞—á–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    )
    await state.clear()
    
    await callback.message.answer(
        ("üè† Asosiy menyu:" if lang == "uz" else "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:"),
        reply_markup=get_warehouse_main_menu(lang)
    )

@router.callback_query(F.data == "back_to_warehouse_menu")
async def back_to_warehouse_menu(callback: CallbackQuery, state: FSMContext):
    """Warehouse menyusiga qaytish / –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —Å–∫–ª–∞–¥–∞"""
    lang = await get_user_language(callback.from_user.id) or "uz"
    await callback.message.delete()
    await state.clear()
    
    await callback.message.answer(
        ("üè† Asosiy menyu:" if lang == "uz" else "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:"),
        reply_markup=get_warehouse_main_menu(lang)
    )

@router.callback_query(F.data == "back_to_tech_selection")
async def back_to_tech_selection(callback: CallbackQuery, state: FSMContext):
    """Texnik tanlashga qaytish / –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–µ—Ö–Ω–∏–∫–∞"""
    lang = await get_user_language(callback.from_user.id) or "uz"
    await state.set_state(TechnicianMaterialStates.select_technician)
    
    # Barcha texniklarni olish
    technicians = await get_users_by_role("technician")
    
    if not technicians:
        await callback.message.edit_text(
            ("‚ùå Hozirda tizimda texnik xodimlar mavjud emas." if lang == "uz" else "‚ùå –í —Å–∏—Å—Ç–µ–º–µ —Å–µ–π—á–∞—Å –Ω–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.")
        )
        await state.clear()
        return
    
    # Texniklarni inline keyboard qilish
    keyboard = []
    for tech in technicians:
        full_name = (tech.get('full_name') or '').strip() or f"ID: {tech['id']}"
        keyboard.append([
            InlineKeyboardButton(
                text=f"üë®‚Äçüîß {full_name}",
                callback_data=f"select_tech_{tech['id']}"
            )
        ])
    
    keyboard.append([
        InlineKeyboardButton(
            text=("‚óÄÔ∏è Orqaga" if lang == "uz" else "‚óÄÔ∏è –ù–∞–∑–∞–¥"),
            callback_data="back_to_warehouse_menu"
        )
    ])
    
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await callback.message.edit_text(
        ("üë®‚Äçüîß Qaysi texnik xodimga material berishni xohlaysiz?\n\nTexnik xodimni tanlang:"
         if lang == "uz" else
         "üë®‚Äçüîß –ö–æ–º—É –∏–∑ —Ç–µ—Ö–Ω–∏–∫–æ–≤ –≤—ã–¥–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª?\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:"),
        reply_markup=reply_markup
    )
